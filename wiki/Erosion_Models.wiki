#summary Explanation of three Erosion Models.

= Introduction =
Erosion Modeling is taking a heightmap and simulating erosion to alter it. Often this is used in video games to make the map more playable. Games generally require large relatively flat areas, but still want steep cliffs for aesthetic value.

I implemented three different techniques, as described in [http://oddlabs.com/download/terrain_generation.pdf this paper]. The three are *Thermal Erosion*, *Hydraulic Erosion*, and *Improved Erosion*.

= Contents =
<wiki:toc max_depth="5" />

= Algorithms =

== Thermal Erosion ==
*Thermal Erosion* represents gravity collapsing cliffs. The idea is relatively simple: The slope of a point is the difference in height between that point and its tallest/shortest neighbor. For each point if the slope is greater than the angle _T_, called the talus angle, then gravity wins and soil is moved until the slope is less than _T_.

This is a relatively straight-forward algorithm, but there are a few different ways to handle some issues. For instance, when altering the terrain, changes can be immediately applied or a difference map can be used that applies all changes at once. In my implementation I immediately applied the changes.

The method for checking neighbors can be changed as well. In 2D a point has 8 neighbors, called the Moore Neighborhood. However, only checking four corners (called the Von Neumann Neighborhood) yields roughly the same results while greatly improving speed. The Von Neumann neighborhood uses the four neighbors that make a cross shape, however I used a rotated Von Neumann neighborhood like so:

//rotated Von Neumann neighborhood picture

Although the code can be easily changed (two operations) to use a Moore neighborhood instead.

Thermal Erosion:
//thermal erosion example picture

=== Comparison ===

==== Pros ====
  * Each iteration is very fast
  * Needs very few iterations
  * Easy to understand and implement
  * Creates flat areas well

==== Cons ====
  * Doesn't maintain cliffs at all
  * Flat areas are usually exactly the _T_ angle
  * Not great quality

== Hydraulic Erosion ==
*Hydraulic Erosion* models rainwater picking up sediment from uphill and depositing it downhill. This ends up being considerably more complex than *Thermal Erosion*, but can be roughly broken into four steps:

  # Rainfall (new water)
  # Erosion (picking up sediment)
  # Water Movement (downhill usually)
  # Evaporation / Deposition (depositing the sediment)

This is usually done over many iterations. To keep track of everything, a few secondary maps are used: a *water map*, a *sediment map*, and a *difference map*. The *difference map* is the same as in *Thermal Erosion*: changes for an iteration are recorded to it then applied all at once after each iteration. In my code I again did not use a *difference map* and instead apply changes immediately.

A few coefficients must be defined:
  * _rain`_`amount_ : how much rain is deposited on each cell each iteration
  * _solubility_ : how much soil is eroded into sediment each iteration
  * _evaporation_ : what percentage of water evaporates each iteration
  * _capacity_ : how much sediment a given unit of water can hold



= Ideas =

= Conclusions =


Click here to see it in action:
http://gimli.morningside.edu/~tra001/Algorithms/Erosion/ImprovedErosion.cgi